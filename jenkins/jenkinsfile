pipeline {
    agent none
    environment {
        APP_PATH = "/nodeApp"
        VERSION = "1.0.0"
        PVC_NAME = "pvc-${BUILD_NUMBER}"
    }
    stages {
        stage('Create PVC') {
            agent {
                kubernetes {
                    label 'kubectl-agent'
                    yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins-agent: true
spec:
  serviceAccountName: jenkins
  containers:
  - name: kubectl
    image: bitnami/kubectl
    command:
    - sleep
    args:
    - infinity
"""
                }
            }
            steps {
                container('kubectl') {
                    script {
                        sh 'echo "Creating PVC'
                        sh """
cat <<EOF | kubectl apply -n jenkins -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${PVC_NAME}
  namespace: jenkins
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
EOF
"""
                    }
                }
            }
        }
        stage('Clone Repository') {
            agent {
            kubernetes {
                label 'git-agent'
                yaml """
apiVersion: v1
kind: Pod
metadata:
    labels:
        jenkins-agent: true
spec:
    serviceAccountName: jenkins
    containers:
    -   name: git
        image: alpine/git:v2.47.2
        command:
        - cat
        tty: true
        volumeMounts:
        -   name: workspace-volume
            mountPath: /workspace
    volumes:
    -   name: workspace-volume
        persistentVolumeClaim:
            claimName: ${PVC_NAME}
                """
                }
            }
            steps {
                container('git') {
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                        sh 'rm -rf $APP_PATH'
                        sh 'git clone https://$GIT_USER:$GIT_PASS@github.com/ankit-cn-47/jenkins-dynamic.git /workspace/node-app'
                    }
                }
            }
        }

        stage('Install Dependencies') {
            agent {
            kubernetes {
                label 'node-agent'
                yaml """
apiVersion: v1
kind: Pod
metadata:
    labels:
        jenkins-agent: true
spec:
    serviceAccountName: jenkins
    containers:
    -   name: node
        image: node:18.20.7-alpine3.21
        command:
        - cat
        tty: true
        volumeMounts:
        -   name: workspace-volume
            mountPath: /workspace
    volumes:
    -   name: workspace-volume
        persistentVolumeClaim:
            claimName: ${PVC_NAME}
                """
                }
            }
            steps {
                container('node') {  // Use the 'nodejs-runner' container
                    sh 'pwd'
                    sh 'cd /workspace/node-app/application'
                    // sh 'npm ci'
                    sh 'ls -la'
                }
            }
        }

        // stage('Run Tests') {
        //     steps {
        //         container('nodejs-runner') {
        //             sh 'cd $WORKSPACE/node-app && npm test'
        //         }
        //     }
        // }

        // stage('Build') {
        //     steps {
        //         container('nodejs-runner') {
        //             sh 'cd $WORKSPACE/node-app && npm run build'
        //         }
        //     }
        // }

        // stage('Deploy') {
        //     steps {
        //         container('nodejs-runner') {
        //             sh 'cd $WORKSPACE/node-app && npm run deploy'
        //         }
        //     }
        // }
    }
        post {
            always {
                agent {
                    kubernetes {
                        label 'kubectl-agent'
                        yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins-agent: true
spec:
  serviceAccountName: jenkins
  containers:
  - name: kubectl
    image: bitnami/kubectl
    command:
    - sleep
    args:
    - infinity
"""
                }
            }
            steps {
                container('kubectl') {
                    script {
                        sh "kubectl delete pvc ${PVC_NAME} -n jenkins || echo 'PVC not found'"
                    }
                }
            }
        }
    }
}
